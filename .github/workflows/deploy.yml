# .github/workflows/deploy.yml
name: Build and Deploy to Kubernetes

on:
  push:
    branches:
      - main
    paths:
      - 'deployment/**'             # Path to your Spring Boot project
      - 'angular-frontend/**'       # Path to your Angular project
      - 'list deployment file/**'   # Corrected: Path to your Kubernetes YAMLs root folder

jobs:
  build-and-push-images:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # --- Build and Push Spring Boot Image ---
    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build Spring Boot JAR
      run: |
        cd deployment # Adjust to your actual Spring Boot project directory name
        ./mvnw clean package -DskipTests

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Spring Boot Docker image
      run: |
        cd deployment
        # Use a distinct tag for Spring Boot within the common repo
        docker build -t avinashanandlucky/test-docker-avinash:spring-boot-backend-${{ github.sha }} .
        docker push avinashanandlucky/test-docker-avinash:spring-boot-backend-${{ github.sha }}
        docker tag avinashanandlucky/test-docker-avinash:spring-boot-backend-${{ github.sha }} avinashanandlucky/test-docker-avinash:spring-boot-backend-latest
        docker push avinashanandlucky/test-docker-avinash:spring-boot-backend-latest


    # --- Build and Push Angular Image ---
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Angular dependencies
      run: |
        cd angular-frontend # Adjust to your actual Angular project directory name
        npm install

    - name: Build Angular application
      run: |
        cd angular-frontend # Adjust to your actual Angular project directory name
        npm run build -- --output-path=./dist/angular-frontend --base-href=/

    - name: Build and push Angular Docker image
      run: |
        cd angular-frontend
        # Use a distinct tag for Angular within the common repo
        docker build -t avinashanandlucky/test-docker-avinash:angular-frontend-${{ github.sha }} .
        docker push avinashanandlucky/test-docker-avinash:angular-frontend-${{ github.sha }}
        docker tag avinashanandlucky/test-docker-avinash:angular-frontend-${{ github.sha }} avinashanandlucky/test-docker-avinash:angular-frontend-latest
        docker push avinashanandlucky/test-docker-avinash:angular-frontend-latest

    # --- Manual Deployment Instructions ---
    - name: Provide Manual Deployment Instructions
      run: |
        echo "----------------------------------------------------------------------------------"
        echo "Docker images have been successfully built and pushed to Docker Hub:"
        echo "  - Spring Boot: avinashanandlucky/test-docker-avinash:spring-boot-backend-${{ github.sha }}"
        echo "  - Angular:     avinashanandlucky/test-docker-avinash:angular-frontend-${{ github.sha }}"
        echo ""
        echo "To deploy these to your local Minikube cluster (e.g., 'dev' namespace):"
        echo "1. Ensure Minikube is running: 'minikube start'"
        echo "2. Navigate to your Kubernetes manifests directory (e.g., 'cd /path/to/your/repo/list deployment file/dev')"
        echo "3. Update your deployment YAMLs to use the new image tags:"
        echo "   - For springboot-deployment.yaml:"
        echo "     Change 'image: spring-boot-service:latest' (or backend-dep-v4) to 'image: avinashanandlucky/test-docker-avinash:spring-boot-backend-latest'"
        echo "   - For angular-frontend-deployment.yaml:"
        echo "     Change 'image: angular-frontend:latest' (or ui-dep-v10) to 'image: avinashanandlucky/test-docker-avinash:angular-frontend-latest'"
        echo "   (Using 'latest' tag for simplicity in manual steps. You can also use the SHA tag for specific versions.)"
        echo "4. Apply the updated manifests to your desired namespace (e.g., 'dev'):"
        echo "   kubectl apply -f . # This applies all YAMLs in the current directory"
        echo ""
        echo "Note: For fully automated deployment to a local Minikube, you would typically use a self-hosted GitHub Actions runner on your machine."
        echo "----------------------------------------------------------------------------------"
