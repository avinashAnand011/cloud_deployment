# .github/workflows/deploy.yml
name: Build and Deploy to Kubernetes

on:
  push:
    branches:
      - main
    paths:
      - 'deployment/**'
      - 'angular-frontend/**'
      - 'list deployment file/**'

  workflow_dispatch:   
# Allows manual triggering of the workflow from the GitHub Actions UI
jobs:
  build-and-push-images:
    # Change 'ubuntu-latest' to target your self-hosted runner using the label you set
    runs-on: [self-hosted, minikube-deploy] # Use 'self-hosted' and your custom label

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # --- Build and Push Spring Boot Image ---
    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build Spring Boot JAR
      run: |
        cd deployment
        ./mvnw clean package -DskipTests

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Spring Boot Docker image
      run: |
        # IMPORTANT: When using a self-hosted runner with Minikube, you need to point
        # Docker to Minikube's daemon *before* building images locally.
        eval $(minikube docker-env)
        
        cd deployment
        docker build -t avinashanandlucky/test-docker-avinash:spring-boot-backend-${{ github.sha }} .
        docker push avinashanandlucky/test-docker-avinash:spring-boot-backend-${{ github.sha }}
        docker tag avinashanandlucky/test-docker-avinash:spring-boot-backend-${{ github.sha }} avinashanandlucky/test-docker-avinash:spring-boot-backend-latest
        docker push avinashanandlucky/test-docker-avinash:spring-boot-backend-latest


    # --- Build and Push Angular Image ---
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Angular dependencies
      run: |
        cd angular-frontend
        npm install

    - name: Build Angular application
      run: |
        cd angular-frontend
        npm run build -- --output-path=./dist/angular-frontend --base-href=/

    - name: Build and push Angular Docker image
      run: |
        # IMPORTANT: Point Docker to Minikube's daemon
        eval $(minikube docker-env)
        
        cd angular-frontend
        docker build -t avinashanandlucky/test-docker-avinash:angular-frontend-${{ github.sha }} .
        docker push avinashanandlucky/test-docker-avinash:angular-frontend-${{ github.sha }}
        docker tag avinashanandlucky/test-docker-avinash:angular-frontend-${{ github.sha }} avinashanandlucky/test-docker-avinash:angular-frontend-latest
        docker push avinashanandlucky/test-docker-avinash:angular-frontend-latest

    # --- Automated Deployment to Minikube ---
    - name: Configure Kubeconfig for Minikube
      run: |
        # Ensure kubectl is configured to use Minikube
        # The runner machine must have Minikube and kubectl installed and configured.
        # This command sets the KUBECONFIG environment variable to Minikube's config.
        # It's assumed your Minikube context is already set up on the runner machine.
        echo "Setting up Kubeconfig for Minikube..."
        minikube update-context # Ensure the current context is updated if Minikube IP changes
        kubectl config use-context minikube # Explicitly set context to minikube
        kubectl config current-context # Verify context

    - name: Deploy to Kubernetes (test Namespace)
      run: |
        echo "Deploying to 'test' namespace..."
        # Navigate to the Kubernetes manifests directory
        # Adjust 'list deployment file' to your actual Kubernetes manifests root directory name
        cd list deployment file

        # Ensure the test namespace exists (idempotent)
        kubectl apply -f namespace-test.yaml

        # Update image tags in local YAMLs before applying
        # Using 'latest' tags as they are pushed by the build steps
        sed -i "s|image: spring-boot-service:backend-dep-v4|image: avinashanandlucky/test-docker-avinash:spring-boot-backend-latest|g" test/springboot-deployment.yaml
        sed -i "s|image: angular-frontend:ui-dep-v10|image: avinashanandlucky/test-docker-avinash:angular-frontend-latest|g" test/angular-deployment.yaml
        
        # Apply all manifests in the 'test' subdirectory
        kubectl apply -f test/

        echo "Deployment to 'test' namespace complete. Checking rollout status..."
        kubectl rollout status deployment/spring-boot-deployment -n test
        kubectl rollout status deployment/angular-frontend-deployment -n test

    - name: Provide Access URL
      run: |
        MINIKUBE_IP=$(minikube ip)
        ANGULAR_NODEPORT=$(kubectl get service angular-frontend-service -n test -o jsonpath='{.spec.ports[?(@.name=="http")].nodePort}')
        echo "----------------------------------------------------------------------------------"
        echo "Application deployed to 'test' namespace."
        echo "Access URL: http://${MINIKUBE_IP}:${ANGULAR_NODEPORT}"
        echo "----------------------------------------------------------------------------------"
